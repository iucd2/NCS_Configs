# /etc/logstash/conf.d/logstash.conf
 
input {
  beats {
    port => 5044
  }
}
 
filter {
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }  
 
  if [message]  =~ /.*rhost=.*/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:host}.*rhost=%{IP:rhost}" }
    }
    mutate { add_field => { "[source][ip]" => "%{rhost}" } }
  }
 
  if [source][ip] {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "threat-intel-otx-new-*"
    query => '{
      "query" => {
        "nested" => {
          "path" => "indicator_ipv4",
          "query" => {
            "term" => {
              "indicator_ipv4.indicator" => "%{[source][ip]}"
            }
          }
        }
      },
      "_source" => ["indicator_ipv4.indicator", "indicator_ipv4.name", "indicator_ipv4.indicator_id"]
    }'
    fields => ["indicator_ipv4.indicator", "indicator_ipv4.name", "indicator_ipv4.indicator_id"]
  }
}  
 
  ruby {
    code => "
      indicators = event.get('indicator_ipv4')
 
      if indicators
        indicators.each do |indicator|
          if indicator['indicator'] == event.get('[source][ip]')
            event.tag('malicious_ip')
            event.set('matched_indicator', indicator)
          end
        end
      end
    "
  }
 
  mutate {
    remove_field => ["indicator_ipv4"]
  } 
 
  if [event][module] == "system" and [event][dataset] == "system.auth" {
    if [message] =~ /sudo:\s+\w+\s*:\s+TTY=/ {
      mutate { add_tag => ["sudo_usage"] }
    }
 
    if [message] =~ /sudo:.*authentication failure.*/ or [message] =~ /sudo:.*incorrect password.*/ {
      mutate { add_tag => ["sudo_auth_failure"] }
    }    
 
    if "Failed password for" in [message] or [message] =~ /.*Failed password for.*/ {
      mutate { add_tag => ["failed_password"] }
    }
 
    mutate {
      lowercase => [ "user.name", "user.id" ]
    }
  }
 
  if [log][file][path] == "/var/log/ufw.log" {
    if "BLOCK" in [message] or "DENIED" in [message] {
      mutate { add_tag => ["firewall_denied_or_blocked"] }
    }
  }
 
  if [source][ip] {
      geoip {
        source => "[source][ip]"
        database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
	target => "geo"
      }
  }
 
  mutate {
    remove_field => ["agent", "input", "fileset", "ecs", "log"]
  }
 
  mutate { remove_tag => ["beats_input_codec_plain_applied"] }
 
}
 
output {
  if "sudo_usage" in [tags] or "malicious_ip" in [tags] or "failed_password" in [tags] or "sudo_auth_failure" in [tags] or "firewall_denied_or_blocked" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "dangerous-logs-%{+YYYY.MM.dd}"
    }
    stdout {
      codec => rubydebug
    }
  }
 
  if "otx_matched" in [tags] or "firewall_denied_or_blocked" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "malicious-logs-%{+YYYY.MM.dd}"
    }
  }
}
